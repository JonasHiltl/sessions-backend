syntax = "proto3";

package user;
option go_package = "github.com/jonashiltl/sessions-backend/packages/grpc/gu";

import "google/api/annotations.proto";
import "common/common.proto";

service UserService {
    rpc CreateUser (CreateUserRequest) returns (PublicUser) {
        option (google.api.http) = {
            post: "/"
            body: "*"
        };
    };
    rpc GetUser (GetUserRequest) returns (PublicUser) {
        option (google.api.http) = {
			get: "/{id}"
        };
    };
    rpc GetMe (Empty) returns (PublicUser) {
        option (google.api.http) = {
			get: "/me"
        };
    };
    rpc UpdateUser (UpdateUserRequest) returns (PublicUser) {
        option (google.api.http) = {
			patch: "/{id}"
            body: "*"
        };
    };
    rpc DeleteUser (GetUserRequest) returns (common.MessageResponse) {
        option (google.api.http) = {
			delete: "/{u_id}"
        };
    };
    rpc UsernameExists (UsernameExistsRequest) returns (UsernameExistsResponse) {
        option (google.api.http) = {
			get: "/username-exists/{username}"
        };
    };
    rpc Register (CreateUserRequest) returns (AuthResponse) {
        option (google.api.http) = {
			post: "/auth/register"
            body: "*"
        };
    };
    rpc Login (LoginRequest) returns (AuthResponse) {
        option (google.api.http) = {
			post: "/auth/login"
            body: "*"
        };
    };
    rpc GetFriends (GetFriendsRequest) returns (FriendResponse) {
        option (google.api.http) = {
			get: "/friend/{u_id}"
        };
    };
    rpc FriendSearch (FriendSearchRequest) returns (FriendResponse) {
        option (google.api.http) = {
			get: "/friend/search/{u_id}"
        };
    };
    rpc FriendRequest (FriendRequestRequest) returns (common.MessageResponse) {
        option (google.api.http) = {
			put: "/friend/{f_id}"
        };
    };
}

message PublicUser {
    string id = 1;
    string username = 2;
    string firstname = 3;
    string lastname = 4;
    string avatar = 5;
    string role = 6;
    int32 friendCount = 7;
}

message CreateUserRequest {
    string username = 1;
    string firstname = 2;
    string lastname = 3;
    string email = 4;
    string password = 5;
    string avatar = 6;
}

message UpdateUserRequest {
    string id = 1;
    string username = 2;
    string firstname = 3;
    string lastname = 4;
    string email = 5;
    string password = 6;
    string avatar = 7;
}

message GetUserRequest {
    string u_id = 1;
}

message FriendRequestRequest {
    string f_id = 1;
}

message GetFriendsRequest {
    string u_id = 1;
    int32 offset = 2;
    int32 limit = 3;
}

message FriendSearchRequest {
    string u_id = 1;
    string query = 2;
    bool accepted = 3;
}

message UsernameExistsRequest {
    string username = 1;
}
message UsernameExistsResponse {
    bool exists = 1;
}

message LoginRequest {
    string username_or_email = 1;
    string password = 2;
}

message FriendResponse {
    repeated PublicUser friends = 1;
}

message AuthResponse {
    string token = 1;
    string message = 2;
}

message Empty {

}