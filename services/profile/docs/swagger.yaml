basePath: /
definitions:
  datastruct.AuthRes:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  datastruct.LoginBody:
    properties:
      password:
        type: string
      usernameOrEmail:
        type: string
    required:
    - password
    - usernameOrEmail
    type: object
  datastruct.MessageRes:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  datastruct.PublicUser:
    properties:
      firstame:
        type: string
      friendCount:
        type: integer
      id:
        type: string
      lastname:
        type: string
      picture:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - firstame
    - username
    type: object
  datastruct.RequestUser:
    properties:
      email:
        type: string
      firstame:
        type: string
      lastname:
        type: string
      password:
        minLength: 8
        type: string
      picture:
        type: string
      username:
        type: string
    required:
    - email
    - firstame
    - password
    - username
    type: object
  echo.HTTPError:
    properties:
      message: {}
    type: object
host: localhost:8080
info:
  contact: {}
  description: This Microservice manages user entities
  title: User Microservice
  version: "1.0"
paths:
  /:
    post:
      consumes:
      - application/json
      description: Saves a user in our DB
      parameters:
      - description: The body to create a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/datastruct.RequestUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/datastruct.PublicUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Create a user
      tags:
      - CRUD
  /{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user from our DB
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/datastruct.PublicUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Delete a user
      tags:
      - CRUD
    get:
      consumes:
      - application/json
      description: Gets the user information by id user
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/datastruct.PublicUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get user
      tags:
      - CRUD
    patch:
      consumes:
      - application/json
      description: Updates user with provided values
      parameters:
      - description: The body to create a thing
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/datastruct.RequestUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/datastruct.PublicUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Update a user
      tags:
      - CRUD
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with credentials
      parameters:
      - description: The required credentials
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/datastruct.LoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/datastruct.AuthRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Saves a new User in the Database and returns auth token
      parameters:
      - description: The body to create a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/datastruct.RequestUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/datastruct.AuthRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Register a new User
      tags:
      - auth
  /friend/{id}:
    get:
      consumes:
      - application/json
      description: Returns a list of friends of a user
      parameters:
      - description: Id of the user to get friends of
        in: path
        name: id
        required: true
        type: string
      - description: Offset list of friends
        in: query
        name: offset
        type: integer
      - description: Limits list of friends
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/datastruct.PublicUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get all friends
      tags:
      - friend
    put:
      consumes:
      - application/json
      description: Sends friend request to user with id from params
      parameters:
      - description: Friend Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/datastruct.MessageRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Send friend request
      tags:
      - friend
  /friend/search/{id}:
    get:
      consumes:
      - application/json
      description: Search friends by username, first name or last name
      parameters:
      - description: Id of user which friends to search
        in: path
        name: id
        required: true
        type: string
      - description: If only accepted friends to search
        in: query
        name: accepted
        type: boolean
      - description: Query string
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/datastruct.PublicUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Search friends of user
      tags:
      - friend
  /me:
    get:
      consumes:
      - application/json
      description: Gets the user information of currently logged in user
      parameters:
      - description: Base64 encoded JWT Payload
        in: header
        name: jwt_payload
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/datastruct.PublicUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get current user
  /username-exists/{username}:
    get:
      consumes:
      - application/json
      description: Check if username is already taken
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Check Username availability
swagger: "2.0"
